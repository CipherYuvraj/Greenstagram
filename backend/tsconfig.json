{
  "compilerOptions": {
    /* Language and Environment */
    "target": "ES2020",                                  /* Set the JavaScript language version for emitted JavaScript and include compatible library declarations. */
    "lib": ["ES2020"],                                   /* Specify a set of bundled library declaration files that describe the target runtime environment. */
    "experimentalDecorators": true,                      /* Enable experimental support for legacy experimental decorators. */
    "emitDecoratorMetadata": true,                       /* Emit design-type metadata for decorated declarations in source files. */

    /* Modules */
    "module": "commonjs",                                /* Specify what module code is generated. */
    "rootDir": "./src",
                                      /* Specify the root folder within your source files. */
    "moduleResolution": "node",                          /* Specify how TypeScript looks up a file from a given module specifier. */
    "baseUrl": "./",                                     /* Specify the base directory to resolve non-relative module names. */
    "paths": {                                           /* Specify a set of entries that re-map imports to additional lookup locations. */
      "../*": ["src/*"],
      "../models/*": ["src/models/*"],
      "../controllers/*": ["src/controllers/*"],
      "../routes/*": ["src/routes/*"],
      "../middleware/*": ["src/middleware/*"],
      "../utils/*": ["src/utils/*"],
      "../types/*": ["src/types/*"]
    },
    "typeRoots": ["./node_modules/@types"],              /* Specify multiple folders that act like './node_modules/@types'. */
    "types": [
      "node",
      "express",
      "jsonwebtoken",
      "express-validator"
    ],                                                  /* Include type definitions for dependencies. */
    "resolveJsonModule": true,                           /* Enable importing .json files. */

    /* JavaScript Support */
    "allowJs": true,                                     /* Allow JavaScript files to be a part of your program. */
    "checkJs": false,                                    /* Disable error reporting in type-checked JavaScript files. */

    /* Emit */
    "declaration": true,                                 /* Generate .d.ts files from TypeScript and JavaScript files in your project. */
    "declarationMap": true,                              /* Create sourcemaps for d.ts files. */
    "sourceMap": true,                                   /* Create source map files for emitted JavaScript files. */
    "outDir": "./dist",                                  /* Specify an output folder for all emitted files. */
    "removeComments": true,                              /* Disable emitting comments. */
    "noEmitOnError": false,                              /* Allow emitting files even if there are type checking errors (changed to false). */

    /* Interop Constraints */
    "isolatedModules": true,                             /* Ensure that each file can be safely transpiled without relying on other imports. */
    "allowSyntheticDefaultImports": true,                /* Allow 'import x from y' when a module doesn't have a default export. */
    "esModuleInterop": true,                             /* Emit additional JavaScript to ease support for importing CommonJS modules. */
    "forceConsistentCasingInFileNames": false,            /* Ensure that casing is correct in imports. */

    /* Type Checking */
    "strict": true,                                     /* Disable strict type-checking to reduce errors (changed to false). */
    "noImplicitAny": false,                               /* Enable error reporting for expressions and declarations with an implied 'any' type. */
    "strictNullChecks": true,                            /* When type checking, take into account 'null' and 'undefined'. */
    "strictFunctionTypes": true,                         /* When assigning functions, check to ensure parameters and the return values are subtype-compatible. */
    "strictBindCallApply": true,                         /* Check that the arguments for 'bind', 'call', and 'apply' methods match the original function. */
    "strictPropertyInitialization": false,               /* Check for class properties that are declared but not set in the constructor (already disabled for Mongoose). */
    "noImplicitThis": true,                              /* Enable error reporting when 'this' is given the type 'any'. */
    "useUnknownInCatchVariables": true,                  /* Default catch clause variables as 'unknown' instead of 'any'. */
    "alwaysStrict": true,                                /* Ensure 'use strict' is always emitted. */
    "noUnusedLocals": false,                              /* Enable error reporting when local variables aren't read. */
    "noUnusedParameters": false,                      /* Raise an error when a function parameter isn't read. */
    "exactOptionalPropertyTypes": false,                 /* Interpret optional property types as written (already disabled for Mongoose). */
    "noImplicitReturns": true,                           /* Enable error reporting for codepaths that do not explicitly return in a function. */
    "noFallthroughCasesInSwitch": true,                  /* Enable error reporting for fallthrough cases in switch statements. */
    "noUncheckedIndexedAccess": false,                   /* Add 'undefined' to a type when accessed using an index (already disabled for Mongoose). */
    "noImplicitOverride": true,                          /* Ensure overriding members in derived classes are marked with an override modifier. */

    /* Completeness */
    "skipLibCheck": true                                 /* Skip type checking all .d.ts files. */
  },
  "include": [
    "src/**/*",
    "src/**/*.json"
  ],
  "exclude": [
    "node_modules",
    "dist",
    "**/*.test.ts",
    "**/*.spec.ts"
  ],
  "ts-node": {
    "esm": false,
    "experimentalSpecifierResolution": "node"
  }
}